#region Copyright (C) 2007-2017 Team MediaPortal

/*
    Copyright (C) 2007-2017 Team MediaPortal
    http://www.team-mediaportal.com

    This file is part of MediaPortal 2

    MediaPortal 2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MediaPortal 2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MediaPortal 2. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

using System;
using System.IO;
using System.Threading.Tasks;
using MediaPortal.Common.ResourceAccess;
using MediaPortal.Extensions.TranscodingService.Interfaces.Metadata;
using MediaPortal.Extensions.TranscodingService.Interfaces.Transcoding;

namespace MediaPortal.Extensions.TranscodingService.Interfaces
{
    public interface IMediaConverter
    {
    #region HLS

    /// <summary>
    /// The file name used for HLS media play list generated by the transcoder
    /// </summary>
    string HLSMediaPlayListName { get; }

    /// <summary>
    /// The file name used for HLS subtitle play list generated by the transcoder
    /// </summary>
    string HLSSubtitlePlayListName { get; }

    /// <summary>
    /// The duration of HLS segments generated by the transcoder
    /// </summary>
    int HLSSegmentTimeInSeconds { get; }

    /// <summary>
    /// Get the segment sequence from the file name
    /// </summary>
    /// <param name="FileName">The segment file name</param>
    /// <returns>The segment sequence number</returns>
    long GetSegmentSequence(string FileName);

    /// <summary>
    /// Get the stream for the requested segment file
    /// </summary>
    /// <param name="VideoTarget">Provides transcoding information used to ensure the right stream is returned</param>
    /// <param name="Context">Provides the current transcoding context used which is used verification</param>
    /// <param name="FileName">The file name of the requested segment</param>
    /// <returns>The stream for the requested segment and the media container of the returned stream</returns>
    Task<(Stream FileData, dynamic ContainerEnum)?> GetSegmentFileAsync(VideoTranscoding VideoTarget, TranscodeContext Context, string FileName);

    #endregion

    #region Metadata

    /// <summary>
    /// Parses the audio trancoding target and estimates the resulting metadata
    /// </summary>
    /// <param name="AudioTarget">The transcoding target of the audio</param>
    /// <returns>Metadata for the transcoded audio</returns>
    TranscodedAudioMetadata GetTranscodedAudioMetadata(AudioTranscoding AudioTarget);

    /// <summary>
    /// Parses the image trancoding target and estimates the resulting metadata
    /// </summary>
    /// <param name="ImageTarget">The transcoding target of the image</param>
    /// <returns>Metadata for the transcoded image</returns>
    TranscodedImageMetadata GetTranscodedImageMetadata(ImageTranscoding ImageTarget);

    /// <summary>
    /// Parses the video trancoding target and estimates the resulting metadata
    /// </summary>
    /// <param name="VideoTarget">The transcoding target of the video</param>
    /// <returns>Metadata for the transcoded video</returns>
    TranscodedVideoMetadata GetTranscodedVideoMetadata(VideoTranscoding VideoTarget);

    #endregion

    #region Transcodes

    /// <summary>
    /// Checks if the specified client transcode is still running
    /// </summary>
    /// <param name="ClientId">ID of the client</param>
    /// <param name="TranscodeId">ID of the transcode</param>
    /// <returns>Transcode running status</returns>
    Task<bool> IsTranscodeRunningAsync(string ClientId, string TranscodeId);

    /// <summary>
    /// Stops the specified running client transcode
    /// </summary>
    /// <param name="ClientId">ID of the client</param>
    /// <param name="TranscodeId">ID of the transcode</param>
    Task StopTranscodeAsync(string ClientId, string TranscodeId);

    /// <summary>
    /// Deletes transcoded files from the cache if needed
    /// </summary>
    Task CleanUpTranscodeCacheAsync();

    /// <summary>
    /// Stops all currently running client transcodes
    /// </summary>
    Task StopAllTranscodesAsync();

    #endregion

    #region Streams

    /// <summary>
    /// Gets a stream from the specified file resource
    /// </summary>
    /// <param name="FileResource">The file resource</param>
    /// <returns>Stream from the requested file resource</returns>
    Task<Stream> GetFileStreamAsync(ILocalFsResourceAccessor FileResource);

    /// <summary>
    /// Gets a transcoded subtitle stream for the specified video transcode
    /// </summary>
    /// <param name="ClientId">ID of the client requesting the stream</param>
    /// <param name="VideoTarget">The video transcoding target</param>
    /// <returns>Stream for the transcoded subtitle</returns>
    Task<Stream> GetSubtitleStreamAsync(string ClientId, VideoTranscoding VideoTarget);

    /// <summary>
    /// Gets a transcode context for the specified media (video/audio/image) transcode
    /// </summary>
    /// <param name="ClientId">ID of the client requesting the trancoded media</param>
    /// <param name="MediaTarget">The media transcoding target</param>
    /// <param name="StartTime">The number of seconds to skip in the video/audio</param>
    /// <param name="Duration">The number of seconds to limit the transcode to</param>
    /// <param name="WaitForBuffer">Wait for the buffer to start growing</param>
    /// <returns>Transcode context for the started transcode</returns>
    Task<TranscodeContext> GetMediaStreamAsync(string ClientId, BaseTranscoding MediaTarget, double StartTime, double Duration, bool WaitForBuffer);

    /// <summary>
    /// Gets a transcode context for the specified channel (SlimTv) transcode
    /// </summary>
    /// <param name="ClientId">ID of the client requesting the trancoded media</param>
    /// <param name="MediaTarget">The media transcoding target</param>
    /// <param name="ChannelId">The channel number to transcode</param>
    /// <param name="WaitForBuffer">Wait for the buffer to start growing</param>
    /// <returns>Transcode context for the started transcode</returns>
    Task<TranscodeContext> GetLiveStreamAsync(string ClientId, BaseTranscoding MediaTarget, int ChannelId, bool WaitForBuffer);
    
    #endregion
  }
}

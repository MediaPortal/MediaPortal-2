<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <!-- Style for the main wizard buttons (Next/Back/Cancel) -->
  <Style x:Key="WizardButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="#FF000000"/>
    <Setter Property="Background" Value="#00000000"/>
    <Setter Property="FontSize" Value="22"/>
    <Setter Property="FontWeight" Value="Bold"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">

          <Label x:Name="ButtonText" VerticalAlignment="Center" HorizontalAlignment="Center"
                 HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                 Padding="{TemplateBinding Padding}"
                 Height="{TemplateBinding Height}"
                 Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}"
                 FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}"
                 Content="{TemplateBinding Content}"/>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Visibility" Value="Collapsed" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- Default style for all buttons without an explicit style, currently identical to WizardButtonStyle -->
  <Style BasedOn="{StaticResource WizardButtonStyle}" TargetType="{x:Type Button}">
  </Style>

  <!-- Style for a button displayed in page content, modifies the WizardButtonStyle with a light background and text -->
  <Style x:Key="ContentButtonStyle" BasedOn="{StaticResource WizardButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="#80FFFFFF"/>
    <Setter Property="Background" Value="#20FFFFFF"/>
  </Style>

  <!-- Style for a CheckBox that changes opacity on selection and grows on mouse over -->
  <Style x:Key="CheckBoxButtonStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <ContentPresenter x:Name="ButtonContent" RenderTransformOrigin="0.5,0.5">
            <ContentPresenter.RenderTransform>
              <TransformGroup>
                <ScaleTransform/>
              </TransformGroup>
            </ContentPresenter.RenderTransform>
          </ContentPresenter>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ButtonContent" To="1.1"  Duration="0:0:0.15"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"/>
                    <DoubleAnimation Storyboard.TargetName="ButtonContent" To="1.1" Duration="0:0:0.15"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"/>
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ButtonContent" To="1"  Duration="0:0:0.15"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"/>
                    <DoubleAnimation Storyboard.TargetName="ButtonContent" To="1" Duration="0:0:0.15"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"/>
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="Opacity" Value="0.5"/>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>

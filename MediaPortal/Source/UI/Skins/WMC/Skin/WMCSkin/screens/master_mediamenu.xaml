<?xml version="1.0" encoding="utf-8"?>

<!--
This is the master template for standard menu screens:
On top the window buttons, the player controls and the notification symbol,
at the left side the menu,
at the right side the content pane and
at the bottom the navbar.

The contents (Contents_Template) are displayed inside a GroupBox.
If an alternative contents display should be used,
the element Alternative_Contents_Element can be used; in that case, no
surrounding GroupBox will be used.

Usage:

  <Include
      xmlns="www.team-mediaportal.com/2008/mpf/directx"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      Source="screens\master_menu.xaml">
    <Include.Resources>
      <ResourceWrapper x:Key="Header_Text">
        [Header text]
      </ResourceWrapper>

      <!- Either ->
      <ControlTemplate x:Key="Contents_Template">
        [UI element to be displayed in the content area]
      </ControlTemplate>
      <!- Or ->
      <ControlTemplate x:Key="Alternative_Contents_Template">
        [UI element to be displayed in the content area]
      </ControlTemplate>

    </Include.Resources>
  </Include>

Parameters which have to be accessible by a DynamicResource lookup:
 - Header_Text (String): The text to be displayed as header. Only used when Contents_Template is given.
 - Contents_Template (ConrolTemplate): Template for the contents to be displayed
   in the content area at the right side, inside a GroupBox.
 - Alternative_Contents_Template (ControlTemplate): Template of the contents to be displayed
   in the content area at the right side, without a GroupBox.
-->

<Include
    xmlns="www.team-mediaportal.com/2008/mpf/directx"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Source="screens\master_bare.xaml"
    xmlns:mp_special_controls="clr-namespace:MediaPortal.UI.SkinEngine.SpecialElements.Controls;assembly=SkinEngine"
    xmlns:fanart="clr-namespace:MediaPortal.Extensions.UserServices.FanArtService.Client;assembly=FanArtService.Client"
    xmlns:wmc="clr-namespace:MediaPortal.UiComponents.WMCSkin.Controls;assembly=WMCSkin"
    >
  <Include.Resources>

    <!-- Header has to be defined by the includer: "Header_Text" -->

    <ControlTemplate x:Key="FanArtBackground_Template">
      <ControlTemplate.Resources>
        <fanart:FanArtImageSourceConverter x:Key="FanArtImageSourceConverter"/>
        <Model x:Key="FanArtBackgroundModel" Id="8F42C8E9-E8A3-475C-A50A-99E1E644DC91"/>
        <Model x:Key="SkinSettingsModel" Id="13961014-16C4-4361-9751-8E2C585EFD44"/>
      </ControlTemplate.Resources>
      <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <Image x:Name="FanArtImageBackground" Stretch="UniformToFill"
               IsVisible="{Binding Source={StaticResource SkinSettingsModel}, Path=[WMC].EnableFanart}">
          <Image.Source>
            <ImageSourceWrapper Delay="0.5" DelayInOut="true" Transition="transitions\dissolve" TransitionDuration="0.5"
                   Source="{Binding Source={StaticResource FanArtBackgroundModel}, Path=ImageSource, Converter={StaticResource FanArtImageSourceConverter}, ConverterParameter=FanArt;1920;1080;False}"/>
          </Image.Source>
        </Image>
        <Image Stretch="Fill" Opacity="{Binding Source={StaticResource SkinSettingsModel}, Path=[WMC].FanartOverlayOpacity}">
          <Image.Source>
            <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0} == {LayoutType}.{GridLayout} ? {1} : ({0} == {LayoutType}.{ListLayout} ? {2} : {3})">
              <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType"/>
              <Binding Source="Background_GridView.png"/> <!--Grid-->
              <Binding Source="Background_ListView.png"/> <!--List-->
              <Binding Source="Background_GridView.png"/> <!--Cover-->
            </MultiBinding>
          </Image.Source>
        </Image>
      </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="Client_Template">
      <DockPanel LastChildFill="True" Margin="10">
        <DockPanel.Resources>
          <Model x:Key="MenuModel" Id="9E9D0CD9-4FDB-4c0f-A0C4-F356E151BDE0"/>
        </DockPanel.Resources>
        
        <wmc:ExcludeItemsListActionIdFilter x:Name="TopMenuItemFilter" DockPanel.Dock="Top" Filter="{StaticResource ActionIdFilter}"
                                            ItemsSource="{Binding Source={StaticResource MenuModel}, Path=MenuItems, Mode=OneTime}">
          <wmc:ExcludeItemsListActionIdFilter.IsVisible>
            <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType" 
                     Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} != {LayoutType}.{ListLayout}"/>
          </wmc:ExcludeItemsListActionIdFilter.IsVisible>
          <wmc:ExcludeItemsListActionIdFilter.Triggers>
            <!--Set the menu to open when the list gets focus, this ensures the hidden menu is always in the correct state-->
            <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
              <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=OpenMenu}"/>
            </EventTrigger>
          </wmc:ExcludeItemsListActionIdFilter.Triggers>
          <wmc:ExcludeItemsListActionIdFilter.Template>
            <ControlTemplate>
              <ListView x:Name="TopMenu" Margin="10,0,20,10" Style="{ThemeResource TopMenuListViewStyle}" Height="90"
                        VerticalAlignment="Top" HorizontalAlignment="Stretch" RestoreFocus="True"
                        ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FilteredItems, Mode=OneTime}">
                <ListView.Resources>
                  <CommandBridge x:Key="Menu_Command" Command="{Binding Path=Command,Mode=OneTime}"/>
                </ListView.Resources>
              </ListView>
            </ControlTemplate>            
          </wmc:ExcludeItemsListActionIdFilter.Template>
        </wmc:ExcludeItemsListActionIdFilter>        

        <!-- Order matters here: The content control has to be the last control to fill the rest of the space -->
        <Grid x:Name="ContentPanel" SetFocusPrio="Default">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
          </Grid.RowDefinitions>

          <!--Container for content templates to handle common triggers-->
          <Grid Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid.Triggers>
              <!--Close the hidden menu when the main content gets focus-->
              <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
                <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=CloseMenu}"/>
              </EventTrigger>
            </Grid.Triggers>

            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <GroupBox x:Name="ContentGroupBox" Grid.Row="0" Grid.Column="0" Margin="0,-15,0,0"
                      Header="{Binding Source={DynamicResource ResourceKey=Header_Text},Path=Resource}" DockPanel.Dock="Center"
                      VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      IsVisible="{Binding ElementName=ContentControl,Path=Template,Converter={StaticResource ReferenceToBoolConverter}}"
                      Style="{ThemeResource ContentGroupBoxStyle}">
              <Control x:Name="ContentControl" Template="{DynamicResource ResourceKey=Contents_Template}" SetFocus="true"/>
            </GroupBox>
            <Control x:Name="AlternativeContentControl" Grid.Row="0" Grid.Column="0"
                     VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                     Template="{DynamicResource ResourceKey=Alternative_Contents_Template}"
                     IsVisible="{Binding RelativeSource={RelativeSource Self},Path=Template,Converter={StaticResource ReferenceToBoolConverter}}"/>
          </Grid>

          <Grid x:Name="FadeBackground" Background="{ThemeResource DialogBackgroundFadeColor}" IsVisible="False"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-200,-500,-200,-500" Opacity="0"/>

          <!--
          This control captures when the mouse moves over the content when the menu is open as the fade background above
          covers the content preventing it from getting mouse focus. It has a right margin the same width as the menu so
          it is not accidently hit whilst the menu is opened with the mouse.
          -->
          <Grid x:Name="MouseCaptureControl" IsVisible="{Binding Source={StaticResource MenuModel}, Path=IsMenuOpen}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-200,-500, 500,-500">
            <Grid.Triggers>
              <!--Close the menu when the mouse moves over this control as the fade background above covers the main content and prevents it getting focus-->
              <EventTrigger RoutedEvent="FrameworkElement.MouseMove">
                <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=CloseMenu}"/>
              </EventTrigger>
            </Grid.Triggers>
          </Grid>

          <Grid x:Name="RightPanel" Margin="0,80,-650,-80" VerticalAlignment="Stretch"
              Width="650" HorizontalAlignment="Right">
            <Grid.IsVisible>
              <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType"
                     Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} == {LayoutType}.{ListLayout}"/>
            </Grid.IsVisible>
            <Grid.Resources>
              <Storyboard x:Key="SlideInStoryboard" FillBehavior="HoldEnd">
                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="FadeBackground" Storyboard.TargetProperty="IsVisible">
                  <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="True"/>
                </ObjectAnimationUsingKeyFrames>
                <DoubleAnimation BeginTime="00:00:00" From="0" To="-550" Duration="00:00:00.9" DecelerationRatio="0"
                                 FillBehavior="HoldEnd" Storyboard.TargetName="RightPanel" Storyboard.TargetProperty="RenderTransform.X">
                  <DoubleAnimation.EasingFunction>
                    <BackEase Amplitude="0.35" EasingMode="EaseOut"/>
                  </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.01" FillBehavior="HoldEnd" Storyboard.TargetName="FadeBackground" Storyboard.TargetProperty="Opacity">
                  <SplineDoubleKeyFrame KeyTime="00:00:00.01" Value="0"/>
                  <SplineDoubleKeyFrame KeyTime="00:00:00.7" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <Storyboard x:Key="SlideOutStoryboard" FillBehavior="HoldEnd">
                <DoubleAnimation BeginTime="00:00:00" From="-550" To="0" Duration="00:00:00.9"
                                 FillBehavior="HoldEnd" Storyboard.TargetName="RightPanel" Storyboard.TargetProperty="RenderTransform.X">
                  <DoubleAnimation.EasingFunction>
                    <BackEase Amplitude="0.35" EasingMode="EaseIn"/>
                  </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="FadeBackground" Storyboard.TargetProperty="Opacity">
                  <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5"/>
                  <SplineDoubleKeyFrame KeyTime="00:00:00.7" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="Stop" Storyboard.TargetName="FadeBackground" Storyboard.TargetProperty="IsVisible">
                  <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="True"/>
                  <DiscreteObjectKeyFrame KeyTime="00:00:00.65" Value="False"/>
                </ObjectAnimationUsingKeyFrames>
              </Storyboard>
            </Grid.Resources>
            <Grid.Triggers>
              <!--Open the menu when the grid gets focus-->
              <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
                <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=OpenMenu}"/>
              </EventTrigger>
              <!-- Slide-In animation when the MenuModel.ShowMenu gets true -->
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Binding="{Binding Source={StaticResource MenuModel},Path=IsMenuOpen}" Value="True" />
                  <Condition Value="True">
                    <Condition.Binding>
                      <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType"
                     Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} == {LayoutType}.{ListLayout}"/>
                    </Condition.Binding>
                  </Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                  <BeginStoryboard x:Name="SlideIn_BeginStoryboard" Storyboard="{ThemeResource SlideInStoryboard}"/>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                  <BeginStoryboard x:Name="SlideOut_BeginStoryboard" Storyboard="{ThemeResource SlideOutStoryboard}"/>
                  <StopStoryboard BeginStoryboardName="SlideIn_BeginStoryboard"/>
                </MultiTrigger.ExitActions>
                <Setter TargetName="MainMenu" Property="SetFocusPrio" Value="Highest" />
                <Setter TargetName="MainMenu" Property="SetFocus" Value="True" />
                <Setter Property="Grid.ZIndex" Value="1000.0"/>
              </MultiTrigger>
            </Grid.Triggers>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="550"/>
              <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.RenderTransform>
              <TranslateTransform X="0"/>
            </Grid.RenderTransform>
            <Border x:Name="DialogBorder" Margin="10,0,67,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" CornerRadius="4" BorderThickness="3">
              <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0.02,1.4">
                  <GradientStop Color="#8CFFFFFF" Offset="0"/>
                  <GradientStop Color="#8CFFFFFF" Offset="0.7"/>
                  <GradientStop Color="#8CFFFFFF" Offset="1"/>
                </LinearGradientBrush>
              </Border.BorderBrush>
              <Border.Background>
                <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                  <GradientStop Color="{ThemeResource DialogBackgroundGradient1Color}" Offset="0"/>
                  <GradientStop Color="{ThemeResource DialogBackgroundGradient2Color}" Offset="1"/>
                </LinearGradientBrush>
              </Border.Background>
            </Border>
            <ListView x:Name="MainMenu" Grid.Column="0" Style="{ThemeResource SlideMenuListViewStyle}" Margin="20,30,90,30"
                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SetFocusPrio="Default" RestoreFocus="True"
                        ItemsSource="{Binding Source={StaticResource MenuModel},Path=MenuItems,Mode=OneTime}"
                        IsEnabled="{Binding Source={StaticResource MenuModel},Path=IsMenuOpen}">
              <ListView.Resources>
                <CommandBridge x:Key="Menu_Command" Command="{Binding Path=Command,Mode=OneTime}"/>
              </ListView.Resources>
              <ListView.Triggers>
                <Trigger Property="IsEmpty" Value="True">
                  <Setter TargetName="RightPanel" Property="Visibility" Value="Hidden" />
                </Trigger>
              </ListView.Triggers>
            </ListView>
            <Button x:Name="MenuShowButton" Content="Menu" Style="{ThemeResource ButtonWideStyle}"
                      Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" Height="50" Margin="-30,0,0,0"
                      IsEnabled="{Binding Source={StaticResource MenuModel},Path=!IsMenuOpen}"
                      Command="{Command Source={StaticResource MenuModel}, Path=ToggleMenu}">
              <Image Source="Right_Menu.png" Stretch="Uniform" Margin="0,0,0,0"/>
            </Button>
          </Grid>
        </Grid>
      </DockPanel>
    </ControlTemplate>

  </Include.Resources>
</Include>

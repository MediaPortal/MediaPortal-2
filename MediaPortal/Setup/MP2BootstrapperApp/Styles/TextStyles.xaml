<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <!-- TextBox style that does not show the default blue focus box -->
  <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Default style for all text boxes without an explicit style, currently identical to DefaultTextBoxStyle -->
  <Style BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="{x:Type TextBox}"/>

  <!-- Style for a text box displayed in page content, modifies the DefaultTextBoxStyle with a light background and text -->
  <Style x:Key="ContentTextBoxStyle" BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="#20FFFFFF"/>
    <Setter Property="Foreground" Value="#80FFFFFF"/>
    <Setter Property="CaretBrush" Value="#FFFFFFFF"/>
    <Setter Property="BorderBrush" Value="#20FFFFFF"/>
    <Style.Triggers>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- DataTemplate for a PropertyValidationModel<string> that shows the string value in a TextBox and a red border if the value is invalid -->
  <DataTemplate x:Key="ValidationTextBoxTemplate">
    <TextBox x:Name="TextBox" Padding="5"
             Style="{StaticResource ContentTextBoxStyle}"
             HorizontalAlignment="Stretch"
             BorderThickness="2"
             Text="{Binding Value}"/>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IsInvalid}" Value="True">
        <Setter TargetName="TextBox" Property="BorderBrush" Value="Red"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>

</ResourceDictionary>

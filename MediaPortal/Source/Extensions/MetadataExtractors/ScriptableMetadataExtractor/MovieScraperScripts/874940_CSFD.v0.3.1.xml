<?xml version="1.0" encoding="utf-8" ?>
<ScriptableScraper>

  <details>

    <!-- These details are for display purposes only. -->
    <name>CSFD.cz</name>
    <author>Trottel, Kucheek</author>
    <description>This script pulls data from CSFD and IMDb.</description>
    
    <!-- 
    These fields uniquely identify the script. The ID should never 
    change and should be unique (no other script should use this ID). With
    new versions of the script the version numbers should change. EVEN FOR 
    MINOR CHANGES, you should change the version number if you are going to
    distribute it to anyone but internal testers. The point number 
    is for minor bug fix releases. Use it.
    -->
    
    <id>874940</id>
    <version major="0" minor="3" point="1" />
    <published day="12" month="4" year="2014" />
    
    <!--  Changelog
    
    Version  Published   Author     Info
    =======================================================================
    0.3.1    12.4.2014   Kucheek    Fixed title recognition for case when 
                                    CSFD returns details page upon search 
                                    and the movie has a film type defined 
                                    (TV Movie, Drama etc.)
    
    0.3.0    1.2.2014    Kucheek    IMDb ID and alternative title from the 
                                    detail pages of found movies are now 
                                    retrieved already in the scraper search 
                                    phase, which is necessary for correct 
                                    match and also makes the IMDb ID 
                                    auto-approval possible.
                                    
                                    Repaired retrieving Summary from CSFD
                                    
                                    Repaired recognizing of details page
                               
    0.2.3    26.5.2011   Trottel    Repaired retrieving Directors, Actors 
                                    and Summary from CSFD                
    
    -->
    
    <!--
    These fields are used for categorization purposes. Seperate multiple 
    types with a pipe | character.
    -->
    <type>MovieDetailsFetcher</type>
    <language>cs</language>

  </details>
  
  <action name="search">
    
    <set name="offset" value="0" />

    <!-- Variables -->
    <set name="site" value="http://www.csfd.cz/" />
    
    <!-- Regular Expressions -->
          
    <set name="rx_movie_details_block">
      <![CDATA[
      <div id="main">(.+?)<div class="navigation">
      ]]>
    </set>

    <set name="rx_search_titles_years">
      <![CDATA[
      <title>(.+?)(?:\s\/.*?)?\s\((\d{4})\).*?</title>
      ]]>
    </set>

    <set name="rx_search_results_block">
      <![CDATA[
      <h2 class="header">Filmy</h2>(.+?)</ul>
      ]]>
    </set>

    <set name="rx_verify">
      <![CDATA[
      <li>.*?<h3.*?><a href="/film/(.+?)".*?">(.+?)</a>.*?(?:<span class="search-name">\((.+?)\)</span>.*?)?(?:<p>.*?(\d{4})</p>.*?)?</li>
      ]]>
    </set>

    <set name="rx_aka">
      <![CDATA[
      <ul class="names">.*?<h3>(.+?)(?:, (The|A|An|Ein|El|Das|Der|Die|Les|Un|Une))?</h3>.*?</ul>
      ]]>
    </set>

    <!-- Retrieve results using Title -->
    <retrieve name="search_page" url="${site}hledat/?q=${search.title:safe}" encoding="utf-8" retries="10" timeout_increment="3000" />

    <!-- If we got a details page, this is used.
         If not, regex does not match so we don't process it -->
    <parse name="movie_details_block" input="${search_page}" regex="${rx_movie_details_block}" />
    <if test="${movie_details_block}!=">
      <parse name="title" input="${movie_details_block}" regex="&lt;h1&gt;\s*(.+?)(?:, (The|A|An|Ein|El|Das|Der|Die|Les|Un|Une))?(?:\s*&lt;span.+?&lt;/span&gt;)?\s*&lt;/h1&gt;" />
      <set name="movie[0].title" value="${title[0][1]:htmldecode} ${title[0][0]:htmldecode}" />
      <parse name="year" input="${search_page}" regex="&lt;title&gt;.*\((\d{4})\).*&lt;/title&gt;" />
      <set name="movie[0].year" value="${year[0][0]}" />
      <parse name="site_id" input="${search_page}" regex='&lt;link rel="canonical" href="http://www.csfd.cz/film/(.+?)".*?&gt;' />
      <set name="movie[0].site_id" value="${site_id[0][0]}" />
      <set name="movie[0].details_url" value="${site}film/${site_id[0][0]}" />
      <set name="movie[0].popularity" value="100" />
    </if>
   
    <!-- If we got a search result page, this is used.
         If not, regex does not match so we don't process the loop. -->
    <parse name="search_results_block" input="${search_page}" regex="${rx_search_results_block}" />
    <if test="${search_results_block}!=">
      <parse name="movie_details" input="${search_results_block}" regex="${rx_verify}" />
      <loop name="curr_details" on="movie_details" limit="20">
        <add name="counter" value1="${count}" value2="${offset}" />
        <parse name="title" input="${curr_details[1]:htmldecode}" regex="(.+?)(?:, (The|A|An|Ein|El|Das|Die|Der|Les|Un|Une))?$" />
        <set name="movie[${counter}].title" value="${title[0][1]} ${title[0][0]}" />
        <set name="movie[${counter}].year" value="${curr_details[3]:htmldecode}" />
        <set name="movie[${counter}].site_id" value="${curr_details[0]}" />
        <set name="movie[${counter}].details_url" value="${site}film/${curr_details[0]}" />
          
        <!-- For each movie found, we will obtain alternative title 
             from CSFD details page. This will provide a better chance 
             to match the file with the correct movie. -->
        <retrieve name="details_page" url="${movie[${counter}].details_url}" encoding="utf-8" retries="10" timeout_increment="3000" allow_unsafe_header="true" />
        <parse name="aka[${counter}]" input="${details_page}" regex="${rx_aka}" />
        <if test="${aka[${counter}]}!=">
          <set name="movie[${counter}].alternate_titles" value="${aka[${counter}][0][1]:htmldecode} ${aka[${counter}][0][0]:htmldecode}" />
        </if>
        
        <subtract name="movie[${counter}].popularity" value1="99" value2="${counter}" />
                   
        <!-- If NfoBuilder found IMDb ID for the file, 
             we will also obtain it from CSFD details page. 
             This will make the auto approval possible. -->
        <if test='${search.imdb_id}!='>
          <parse name="imdb" input="${details_page}" regex="(tt[\d]+)" />
          <set name="movie[${counter}].imdb_id" value="${imdb[0][0]}" />
          <if test="${search.imdb_id}=${movie[${counter}].imdb_id}">
             <set name="movie[${counter}].popularity" value="100" />
          </if>
        </if>
                    
      </loop>
    </if>
 
  </action>

  <action name="get_details">

    <!-- Only continue if we have a CSFD site ID -->
    <if test="${movie.site_id}!=">

      <!-- Variables -->
      <set name="site" value="http://www.csfd.cz/film/" />

      <!-- Regular Expressions -->

      <set name="rx_summary">
        <![CDATA[
        <h3>Obsah.*?</h3>.*?<ul>.*?<li>(?:.*?<div.*?>)?(?:.*?<img.*?>)?\s*?(.+?)(?:<.*?)?</li>
        ]]>
      </set>

      <!-- Retrieve details -->

      <set name="movie.details_url" value="${site}${movie.site_id}" />
      <retrieve name="details_page" url="${movie.details_url}" encoding="utf-8" retries="10" timeout_increment="3000" allow_unsafe_header="true" />

      <!-- Title -->
      <parse name="title" input="${details_page}" regex="&lt;h1&gt;(.+?)(?:, (The|A|An|Ein|El|Das|Der|Die|Les|Un|Une))?(?:\s&lt;span.+?&lt;/span&gt;)?.*?&lt;/h1&gt;" />
      <set name="movie.title" value="${title[0][1]:htmldecode} ${title[0][0]:htmldecode}" />
      <replace name="movie.title" input="${movie.title}" pattern="( \(TV film\))" with="" />

      <!-- Alternate Titles -->
      <parse name="akas_block" input="${details_page}" regex='&lt;ul class="names"&gt;.+?&lt;/ul&gt;' />
      <parse name="akas" input="${akas_block}" regex="&lt;h3&gt;(.+?)(?:, (The|A|An|Ein|El|Das|Der|Die|Les|Un|Une))?&lt;/h3&gt;" />
      <set name="movie.alternate_titles" value="" />
      <loop name="currAka" on="akas">
        <set name="movie.alternate_titles" value="${movie.alternate_titles}|${currAka[1]:htmldecode} ${currAka[0]:htmldecode}" />
      </loop>

      <!-- Directors -->
      <parse name="directors_block" input="${details_page}" regex='&lt;h4&gt;Režie:&lt;/h4&gt;(.*?)&lt;/div&gt;' />
      <parse name="directors" input="${directors_block}" regex='&lt;a href="/tvurce/.+?"&gt;(.*?)&lt;/a&gt;' />
      <set name="movie.directors" value="" />
      <loop name="currDirector" on="directors">
        <set name="movie.directors" value="${movie.directors}|${currDirector[0]:htmldecode}" />
      </loop>

      <!-- Actors -->
      <parse name="actors_block" input="${details_page}" regex='&lt;h4&gt;Hrají:&lt;/h4&gt;(.*?)&lt;/div&gt;' />
      <parse name="actors" input="${actors_block}" regex='&lt;a href="/tvurce/.+?"&gt;(.*?)&lt;/a&gt;' />
      <set name="movie.actors" value="" />
      <loop name="currActor" on="actors" limit="20">
        <set name="movie.actors" value="${movie.actors}|${currActor[0]:htmldecode}" />
      </loop>

      <!-- Year -->
      <parse name="year" input="${details_page}" regex="&lt;title&gt;.*\((\d{4})\).*&lt;/title&gt;" />
      <set name="movie.year" value="${year[0][0]}" />

      <!-- Genres -->
      <parse name="genres_block" input="${details_page}" regex='&lt;p class="genre"&gt;(.+?)&lt;/p&gt;' />
      <parse name="genres" input="${genres_block[0][0]}" regex="([^/]+)" />
      <set name="movie.genres" value="" />
      <loop name="currGenre" on="genres">
        <set name="movie.genres" value="${movie.genres}|${currGenre[0]:htmldecode}" />
      </loop>

      <!-- Summary -->
      <parse name="summary" input="${details_page}" regex="${rx_summary}" />
      <set name="summary_clean" value="${summary[0][0]:striptags}" />
      <set name="movie.summary" value="${summary_clean:htmldecode}" />

      <!-- Score -->
      <parse name="score" input="${details_page}" regex='&lt;div id="rating"&gt;.*?(\d+)%.*?&lt;/div&gt;' />
      <set name="movie.score" value="${score[0][0]:htmldecode}" />

      <!-- Popularity -->
      <parse name="votes" input="${details_page}" regex='&lt;div class="count"&gt;.*?všechna hodnocení.*?\((\d+)\)&lt;/a&gt;.*?&lt;/div&gt;' />
      <set name="movie.popularity" value="${votes[0][0]:htmldecode}" />

      <!-- IMDb ID -->
      <parse name="imdb" input="${details_page}" regex="(tt[\d]+)" />
      <set name="movie.imdb_id" value="${imdb[0][0]}" />

      <!-- Retrieve other details from IMDb -->
      <if test="${movie.imdb_id}!=">
        <retrieve name="imdb_details_page" url="http://www.imdb.com/title/${movie.imdb_id}" retries="10" timeout_increment="3000" />

        <!-- Writers -->
        <parse name="writers_block" input="${imdb_details_page}" regex="Writer[s]?:.*?&lt;/h4&gt;(.*?)&lt;/div&gt;" />
        <parse name="writers" input="${writers_block}" regex='&lt;a  href="/name/nm\d+/"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;' />
        <set name="movie.writers" value="" />
        <loop name="currWriter" on="writers">
          <set name="movie.writers" value="${movie.writers}|${currWriter[0]:htmldecode}" />
        </loop>

        <!-- Certification -->
        <retrieve name="certification_details_page" url="http://www.imdb.com/title/${movie.imdb_id}/parentalguide#certification" retries="10" timeout_increment="3000" />
        <parse name="certification" input="${certification_details_page}" regex='&gt;UK:((?:U)|(?:PG)|(?:12)|(?:12A)|(?:15)|(?:18)|(?:R18))&lt;/a&gt;' />
        <set name="movie.certification" value="${certification[0][0]:htmldecode}" />

        <replace name="movie.certification" input="${movie.certification}" pattern="(U)" with="Pro všechny věkové skupiny" />
        <replace name="movie.certification" input="${movie.certification}" pattern="(PG)" with="Doprovod rodiče" />
        <replace name="movie.certification" input="${movie.certification}" pattern="(12)" with="Přístupné od 12 let" />
        <replace name="movie.certification" input="${movie.certification}" pattern="(Přístupné od 12 letA)" with="Vhodné od 12 let" />
        <replace name="movie.certification" input="${movie.certification}" pattern="(15)" with="Přístupné od 15 let" />
        <replace name="movie.certification" input="${movie.certification}" pattern="(18)" with="Přístupné od 18 let" />
        <replace name="movie.certification" input="${movie.certification}" pattern="(RPřístupné od 18 let)" with="Nepřístupný film" />

        <if test="${movie.certification}=">
          <set name="movie.certification" value="Neuvedeno" />
        </if>

        <!-- Language (only first match) -->
        <parse name="language" input="${imdb_details_page}" regex="Language[s]?:&lt;/h4&gt;.*?&gt;(.*?)&lt;/a&gt;" />
        <set name="movie.language" value="${language[0][0]:htmldecode}" />

        <replace name="movie.language" input="${movie.language}" pattern="(Cantonese)" with="Kantonsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Czech)" with="Česky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Danish)" with="Dánsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Dutch)" with="Nizozemsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(English)" with="Anglicky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Estonian)" with="Estonsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Filipino)" with="Filipínsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Finish)" with="Finsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(French)" with="Francouzsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(German)" with="Německy" />
        <replace name="movie.language" input="${movie.language}" pattern="(Hindi)" with="Hindsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Icelandic)" with="Islandsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Italian)" with="Italsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Japanese)" with="Japonsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Korean)" with="Korejsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Mandarin)" with="Mandarínsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Mongolian)" with="Mongolsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Norwegian)" with="Norsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Portuguese)" with="Portugalsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Russian)" with="Rusky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Saami)" with="Laponsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Spanish)" with="Španělsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Swedish)" with="Švédsky" />
        <replace name="movie.language" input="${movie.language}" pattern="(Tamil)" with="Tamilsky" />

        <!-- Tagline -->
        <parse name="tagline" input="${imdb_details_page}" regex="Tagline[s]?:&lt;/h4&gt;(.*?)&lt;" />
        <set name="movie.tagline" value="${tagline[0][0]:htmldecode}" />

        <!-- Runtime -->
        <parse name="runtime" input="${imdb_details_page}" regex="Runtime:&lt;/h4&gt;.*?(\d+) min\s+" />
        <set name="movie.runtime" value="${runtime[0][0]:htmldecode}" />
        <if test="${movie.runtime}=">
          <parse name="runtime2" input="${details_page}" regex='&lt;p class="origin"&gt;.+?, (\d+) min&lt;/p&gt;' />
          <set name="movie.runtime" value="${runtime2[0][0]:htmldecode}" />
        </if>

      </if>

    </if>

  </action>
  
</ScriptableScraper>
<?xml version="1.0" encoding="utf-8"?>

<!--
This is the master template for standard menu screens:
On top the window buttons, the player controls and the notification symbol,
at the left side the menu,
at the right side the content pane and
at the bottom the navbar.

The contents (Contents_Template) are displayed inside a GroupBox.
If an alternative contents display should be used,
the element Alternative_Contents_Element can be used; in that case, no
surrounding GroupBox will be used.

Usage:

  <Include
      xmlns="www.team-mediaportal.com/2008/mpf/directx"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      Source="screens\master_menu.xaml">
    <Include.Resources>
      <ResourceWrapper x:Key="Header_Text">
        [Header text]
      </ResourceWrapper>

      <!- Either ->
      <ControlTemplate x:Key="Contents_Template">
        [UI element to be displayed in the content area]
      </ControlTemplate>
      <!- Or ->
      <ControlTemplate x:Key="Alternative_Contents_Template">
        [UI element to be displayed in the content area]
      </ControlTemplate>

    </Include.Resources>
  </Include>

Parameters which have to be accessible by a DynamicResource lookup:
 - Header_Text (String): The text to be displayed as header. Only used when Contents_Template is given.
 - Contents_Template (ConrolTemplate): Template for the contents to be displayed
   in the content area at the right side, inside a GroupBox.
 - Alternative_Contents_Template (ControlTemplate): Template of the contents to be displayed
   in the content area at the right side, without a GroupBox.
-->

<Include
    xmlns="www.team-mediaportal.com/2008/mpf/directx"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Source="screens\master_bare_media.xaml"
    xmlns:fanart="clr-namespace:MediaPortal.Extensions.UserServices.FanArtService.Client;assembly=FanArtService.Client"
    >
  <Include.Resources>
     <Model x:Key="MenuModel" Id="9E9D0CD9-4FDB-4c0f-A0C4-F356E151BDE0"/>

    <ControlTemplate x:Key="Header_Text_Template">
      <Label x:Name="HeaderLabel" Color="{ThemeResource TextColor}"
             Content="{Binding Source={DynamicResource Header_Text},Path=Resource}">
      </Label>
    </ControlTemplate>

    <ControlTemplate x:Key="TopGradient_Template">
      <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="0" Panel.ZIndex="1000">
        <Border.Background>
          <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Color="#E6000000" Offset="0" />
            <GradientStop Color="#00000000" Offset="1" />
          </LinearGradientBrush>
        </Border.Background>
      </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="BottomGradient_Template">
      <Border HorizontalAlignment="Stretch" VerticalAlignment="Bottom" BorderThickness="0" Height="100" Panel.ZIndex="1000">
        <Border.Background>
          <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Color="#00000000" Offset="0" />
            <GradientStop Color="#E6000000" Offset="1" />
          </LinearGradientBrush>
        </Border.Background>
      </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="FanArtBackground_Template">
      <ControlTemplate.Resources>
        <fanart:FanArtImageSourceConverter x:Key="FanArtImageSourceConverter"/>
        <Model x:Key="FanArtBackgroundModel" Id="8F42C8E9-E8A3-475C-A50A-99E1E644DC91"/>
        <Model x:Key="SkinSettingsModel" Id="13961014-16C4-4361-9751-8E2C585EFD44"/>
      </ControlTemplate.Resources>
      <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

        <Image x:Name="FanArtImageBackground" Stretch="UniformToFill"
               IsVisible="{Binding Source={StaticResource SkinSettingsModel}, Path=[Nereus].EnableFanart}">
          <Image.Source>
            <ImageSourceWrapper Delay="0.5" DelayInOut="true" Transition="transitions\dissolve" TransitionDuration="0.5"
                   Source="{Binding Source={StaticResource FanArtBackgroundModel}, Path=ImageSource, Converter={StaticResource FanArtImageSourceConverter}, ConverterParameter=FanArt;1920;1080;False}"/>
          </Image.Source>
        </Image>
        <Image Stretch="Fill">
          <Image.Source>
            <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0} == {LayoutType}.{GridLayout} ? {1} : ({0} == {LayoutType}.{ListLayout} ? {2} : {3})">
              <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType"/>
              <Binding Source="Background_ListView.png"/>
              <!--Grid-->
              <Binding Source="Background_ListView.png"/>
              <!--List-->
              <Binding Source="Background_CoverView.png"/>
              <!--Cover-->
            </MultiBinding>
          </Image.Source>
        </Image>
      </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="Client_Template">
      <Grid x:Name="ClientGrid" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-200,0,0,-200">

        <!--Slide content in and out depending on hidden menu state-->
        <Grid.Triggers>

          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Binding="{Binding Source={StaticResource MenuModel},Path=IsMenuOpen}" Value="True" />
              <Condition Value="True">
                <Condition.Binding>
                  <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType" 
                           Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} != {LayoutType}.{CoverLayout}"/>
                </Condition.Binding>
              </Condition>
            </MultiTrigger.Conditions>
            <MultiTrigger.EnterActions>
              <BeginStoryboard x:Name="SlideIn" Storyboard="{ThemeResource HiddenMenuSlideIn}"/>
            </MultiTrigger.EnterActions>
            <MultiTrigger.ExitActions>
              <BeginStoryboard x:Name="SlideOut" Storyboard="{ThemeResource HiddenMenuSlideOut}"/>
              <StopStoryboard BeginStoryboardName="SlideIn"/>
            </MultiTrigger.ExitActions>
          </MultiTrigger>

          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Binding="{Binding Source={StaticResource MenuModel},Path=IsMenuOpen}" Value="True" />
              <Condition Value="True">
                <Condition.Binding>
                  <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType" 
                           Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} == {LayoutType}.{CoverLayout}"/>
                </Condition.Binding>
              </Condition>
            </MultiTrigger.Conditions>
            <MultiTrigger.EnterActions>
              <BeginStoryboard x:Name="SlideInVertical" Storyboard="{ThemeResource HiddenMenuSlideInVertical}"/>
            </MultiTrigger.EnterActions>
            <MultiTrigger.ExitActions>
              <BeginStoryboard x:Name="SlideOutVertical" Storyboard="{ThemeResource HiddenMenuSlideOutVertical}"/>
              <StopStoryboard BeginStoryboardName="SlideInVertical"/>
            </MultiTrigger.ExitActions>
          </MultiTrigger>
          
        </Grid.Triggers>

        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="200"/>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="*"/>
          <RowDefinition Height="200"/>
        </Grid.RowDefinitions>

        <Grid.RenderTransform>
          <TranslateTransform X="0" Y="0"/>
        </Grid.RenderTransform>

        <!-- Order matters here: The content control has to be the last control to fill the rest of the space -->
        <Grid x:Name="ContentPanel" SetFocusPrio="DefaultLow" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
          </Grid.RowDefinitions>

          <Grid.VerticalAlignment>
            <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0} != {LayoutType}.{CoverLayout} ? {1} : {2}">
              <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType"/>
              <Binding Source="Stretch"/>
              <Binding Source="Bottom"/>
            </MultiBinding>
          </Grid.VerticalAlignment>

          <Grid.Margin>
            <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0} != {LayoutType}.{CoverLayout} ? {1} : {2}">
              <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType"/>
              <Binding Source="0,0,0,0"/>
              <Binding Source="0,60,0,-60"/>
            </MultiBinding>
          </Grid.Margin>

          <Grid.Triggers>
            <!--Close the hidden menu when the main content gets focus-->
            <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
              <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=CloseMenu}"/>
            </EventTrigger>
          </Grid.Triggers>

          <Control x:Name="ContentControl" SetFocusPrio="DefaultLow" Template="{DynamicResource ResourceKey=Contents_Template}"  Grid.Row="0" Grid.Column="0" Margin="10,0,10,10"
                    IsVisible="{Binding ElementName=ContentControl,Path=Template,Converter={StaticResource ReferenceToBoolConverter}}"/>
          <Control x:Name="AlternativeContentControl" Grid.Row="0" Grid.Column="0"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                    Template="{DynamicResource ResourceKey=Alternative_Contents_Template}"
                    IsVisible="{Binding RelativeSource={RelativeSource Self},Path=Template,Converter={StaticResource ReferenceToBoolConverter}}"/>
        </Grid>

        <Grid x:Name="SlideMenuPanel" Grid.RowSpan="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0,-100,0,-200">
          <Grid.IsVisible>
            <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType" 
                     Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} != {LayoutType}.{CoverLayout}"/>
          </Grid.IsVisible>
          <Grid.Triggers>
            <!--Open the menu when the grid gets focus-->
            <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
              <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=OpenMenu}"/>
            </EventTrigger>
          </Grid.Triggers>

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
          </Grid.RowDefinitions>

          <Image Source="MenuGlow.png" Stretch="Uniform" VerticalAlignment="Stretch" Margin="0,0,-38,200"/>
          <Rectangle Fill="Black" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="0.9"/>
          <Image Source="LeftMenuIndicator.PNG" HorizontalAlignment="Right" Stretch="Fill" Width="25" Height="45" 
                 Opacity="0.9" VerticalAlignment="Center" Margin="0,0,-25,200"/>

          <ListView x:Name="MainListMenu" Style="{ThemeResource MediaMenuListViewStyle}"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RestoreFocus="True"
                    ItemsSource="{Binding Source={StaticResource MenuModel},Path=MenuItems,Mode=OneTime}">
            <ListView.Resources>
              <CommandBridge x:Key="Menu_Command" Command="{Binding Path=Command,Mode=OneTime}"/>
            </ListView.Resources>
          </ListView>

        </Grid>

        <Grid x:Name="SlideMenuPanelBottom" Grid.Row="1" Grid.ColumnSpan="2" VerticalAlignment="Top" HorizontalAlignment="Stretch" Margin="0,250,0,-250">
          <Grid.IsVisible>
            <Binding Source="{StaticResource ViewModeModel}" Path="LayoutType" 
                     Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} == {LayoutType}.{CoverLayout}"/>
          </Grid.IsVisible>
          <Grid.Triggers>
            <!--Open the menu when the grid gets focus-->
            <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
              <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=OpenMenu}"/>
            </EventTrigger>
          </Grid.Triggers>

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="200"/>
          </Grid.RowDefinitions>

          <Image Source="MenuGlowBottom.png" Stretch="Fill" HorizontalAlignment="Stretch" Height="270" VerticalAlignment="Top" Margin="220,-28,20,-30"/>
          <Rectangle Fill="Black" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="0.9" Margin="0,10,0,-10"/>
          <Image Source="LeftMenuIndicator.PNG" VerticalAlignment="Top" Stretch="Fill" Width="25" Height="45" 
                 Opacity="0.9" HorizontalAlignment="Center" Margin="240,-25,0,0" RenderTransformOrigin="0.5,0.5">
            <Image.RenderTransform>
              <RotateTransform Angle="-90" />
            </Image.RenderTransform>
          </Image>

          <ListView x:Name="MainListMenuBottom" Style="{ThemeResource MediaMenuCoverViewStyle}" Margin="0,18,0,0"
                    HorizontalAlignment="Center" VerticalAlignment="Stretch" RestoreFocus="True" HorizontalContentAlignment="Center"
                    ItemsSource="{Binding Source={StaticResource MenuModel},Path=MenuItems,Mode=OneTime}">
            <ListView.Resources>
              <CommandBridge x:Key="Menu_Command" Command="{Binding Path=Command,Mode=OneTime}"/>
            </ListView.Resources>
          </ListView>

        </Grid>

        <KeyBinding Key="Info" Command="{Command Source={StaticResource MenuModel}, Path=ToggleMenu}"/>
        <KeyBinding Key="Escape" Command="{Command Source={StaticResource MenuModel}, Path=ToggleMenu}" IsEnabled="{Binding Source={StaticResource MenuModel},Path=IsMenuOpen}"/>

      </Grid>
    </ControlTemplate>

  </Include.Resources>
</Include>

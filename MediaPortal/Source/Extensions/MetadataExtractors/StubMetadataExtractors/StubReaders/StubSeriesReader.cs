#region Copyright (C) 2007-2018 Team MediaPortal

/*
    Copyright (C) 2007-2018 Team MediaPortal
    http://www.team-mediaportal.com

    This file is part of MediaPortal 2

    MediaPortal 2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MediaPortal 2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MediaPortal 2. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

using System.Xml.Linq;
using MediaPortal.Common.Logging;
using MediaPortal.Extensions.MetadataExtractors.StubMetadataExtractors.Settings;
using MediaPortal.Extensions.MetadataExtractors.StubMetadataExtractors.Stubs;
using System.Collections.Generic;
using System.Linq;
using System;

namespace MediaPortal.Extensions.MetadataExtractors.StubMetadataExtractors.StubReaders
{
  /// <summary>
  /// Reads the content of a stub-file for an episode of a series into <see cref="SeriesStub"/> objects
  /// </summary>
  class StubSeriesReader : StubReaderBase<SeriesStub>
  {
    #region Consts

    /// <summary>
    /// The name of the root element in a valid stub-file for episodes
    /// </summary>
    private const string SERIES_ROOT_ELEMENT_NAME = "discstub";

    #endregion

    #region Ctor

    /// <summary>
    /// Instantiates a <see cref="StubSeriesReader"/> object
    /// </summary>
    /// <param name="debugLogger">Debug logger to log to</param>
    /// <param name="miNumber">Unique number of the MediaItem for which the stub-file is parsed</param>
    /// <param name="importOnly">If true, no long lasting operations such as parsing images are performed</param>
    /// <param name="httpClient"><see cref="HttpClient"/> used to download from http URLs contained in stub-files</param>
    /// <param name="settings">Settings of the <see cref="StubSeriesMetadataExtractor"/></param>
    public StubSeriesReader(ILogger debugLogger, long miNumber, bool importOnly, StubSeriesMetadataExtractorSettings settings)
      : base(debugLogger, miNumber, importOnly, settings)
    {
      InitializeSupportedElements();
    }

    #endregion

    #region Private methods

    #region Ctor helpers

    /// <summary>
    /// Adds a delegate for each xml element in a movie stub-file that is understood by this MetadataExtractor to StubReaderBase._supportedElements
    /// </summary>
    private void InitializeSupportedElements()
    {
      _supportedElements.Add("disc", new TryReadElementDelegate(TryReadDisc));
      _supportedElements.Add("title", new TryReadElementDelegate(TryReadTitle));
      _supportedElements.Add("message", new TryReadElementDelegate(TryReadMessage));
      _supportedElements.Add("season", new TryReadElementDelegate(TryReadSeason));
      _supportedElements.Add("episodes", new TryReadElementDelegate(TryReadEpisodes));
    }

    #endregion

    #region Public methods

    /// <summary>
    /// Gets the <see cref="SeriesStub"/> objects generated by this class
    /// </summary>
    /// <returns>List of <see cref="SeriesStub"/> objects</returns>
    public List<SeriesStub> GetSeriesStubs()
    {
      return _stubs.Where(s => s.Valid).ToList();
    }

    #endregion

    #region Reader methods for direct child elements of the root element

    /// <summary>
    /// Tries to read the title
    /// </summary>
    /// <param name="element"><see cref="XElement"/> to read from</param>
    /// <returns><c>true</c> if a value was found in <paramref name="element"/>; otherwise <c>false</c></returns>
    private bool TryReadTitle(XElement element)
    {
      // Example of a valid element:
      // <title>Album name</title>
      _currentStub.Valid = ((_currentStub.Title = ParseSimpleString(element)) != null);
      return _currentStub.Valid;
    }

    /// <summary>
    /// Tries to read the name of the disc
    /// </summary>
    /// <param name="element"><see cref="XElement"/> to read from</param>
    /// <returns><c>true</c> if a value was found in <paramref name="element"/>; otherwise <c>false</c></returns>
    private bool TryReadDisc(XElement element)
    {
      // Example of a valid element:
      // <disc>CD</disc>
      return ((_currentStub.DiscName = ParseSimpleString(element)) != null);
    }

    /// <summary>
    /// Tries to read the message to show when the disc is needed
    /// </summary>
    /// <param name="element"><see cref="XElement"/> to read from</param>
    /// <returns><c>true</c> if a value was found in <paramref name="element"/>; otherwise <c>false</c></returns>
    private bool TryReadMessage(XElement element)
    {
      // Example of a valid element:
      // <message>Please insert disc</message>
      return ((_currentStub.Message = ParseSimpleString(element)) != null);
    }

    /// <summary>
    /// Tries to read the season number
    /// </summary>
    /// <param name="element"><see cref="XElement"/> to read from</param>
    /// <returns><c>true</c> if a value was found in <paramref name="element"/>; otherwise <c>false</c></returns>
    private bool TryReadSeason(XElement element)
    {
      // Example of a valid element:
      // <season>1</season>
      _currentStub.Season = ParseSimpleInt(element);
      if (!_currentStub.Season.HasValue)
        _currentStub.Valid = false;
      return _currentStub.Season.HasValue;
    }

    /// <summary>
    /// Tries to read the episodes
    /// </summary>
    /// <param name="element"><see cref="XElement"/> to read from</param>
    /// <returns><c>true</c> if a value was found in <paramref name="element"/>; otherwise <c>false</c></returns>
    private bool TryReadEpisodes(XElement element)
    {
      // Example of a valid element:
      // <tracks>1</tracks>
      HashSet<string> episodes = null;
      episodes = ParseCharacterSeparatedStrings(element, episodes);
      if (episodes == null || episodes.Count == 0)
        _currentStub.Valid = false;
      else
      {
        _currentStub.Episodes = new HashSet<int>();
        foreach (int e in episodes.Select(e => Convert.ToInt32(e)))
          _currentStub.Episodes.Add(e);
      }
      return episodes != null && episodes.Count > 0;
    }

    #endregion

    #region General helper methods

    /// <summary>
    /// Ignores the respective element
    /// </summary>
    /// <param name="element"><see cref="XElement"/> to ignore</param>
    /// <returns><c>false</c></returns>
    /// <remarks>
    /// We use this method as TryReadElementDelegate for elements, of which we know that they are irrelevant in the context of an episode,
    /// but which are nevertheless contained in some episode's stub-files. Having this method registered as handler delegate avoids that
    /// the respective xml element is logged as unknown element.
    /// </remarks>
    private static bool Ignore(XElement element)
    {
      return false;
    }

    #endregion

    #endregion

    #region BaseOverrides

    /// <summary>
    /// Checks whether the <paramref name="itemRootElement"/>'s name is "discstub"
    /// </summary>
    /// <param name="itemRootElement">Element to check</param>
    /// <returns><c>true</c> if the element's name is "discstub"; else <c>false</c></returns>
    protected override bool CanReadItemRootElementTree(XElement itemRootElement)
    {
      var itemRootElementName = itemRootElement.Name.ToString();
      if (itemRootElementName == SERIES_ROOT_ELEMENT_NAME)
        return true;
      _debugLogger.Warn("[#{0}]: Cannot extract metadata; name of the item root element is {1} instead of {2}", _miNumber, itemRootElementName, SERIES_ROOT_ELEMENT_NAME);
      return false;
    }

    #endregion
  }
}
